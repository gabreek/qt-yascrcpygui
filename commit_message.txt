feat(device-management, ui, launcher): Implement device unlock and launcher shortcut

This commit introduces two major new features:

1.  **Device Unlock Functionality**:
    -   Users can now enable an option to attempt unlocking their Android device with a PIN before launching any application or Winlator container.
    -   This improves the user experience by automating the unlock process, especially when the device screen is off or locked.
    -   The feature prompts for a PIN if the device is locked and attempts to unlock it using ADB commands (power, swipe, text input for PIN, enter).

2.  **Launcher Shortcut in Apps Tab**:
    -   A new "Launcher" shortcut is now displayed in the Apps tab, representing the device's default Android launcher.
    -   This allows users to quickly launch their device's home screen.
    -   Special handling is implemented for the Launcher shortcut's configuration, particularly when a global virtual display is active. If a virtual display is enabled globally, the Launcher shortcut will default to using the native device resolution (max_size=0) to avoid display issues.

**Technical Details:**
-   Centralized launch handling in `main_window.py` now orchestrates pre-launch actions, including the optional device unlock workflow.
-   `adb_handler.py` has been extended with new functions to get the default launcher package, determine device lock state, and perform device unlock actions.
-   `app_config.py` now stores `default_launcher` and `try_unlock` settings.
-   UI components in `app_item_widget.py`, `apps_tab.py`, `scrcpy_tab.py`, and `winlator_tab.py` have been updated to support these new features and integrate with the centralized launch logic.
-   `scrcpy_handler.py` now correctly handles the `launcher_shortcut` type for `start_app` and sends a HOME keyevent.

This enhancement significantly improves the usability and flexibility of the application for managing and interacting with Android devices.
